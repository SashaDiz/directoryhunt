{
  "name": "DirectoryHunt",
  "description": "A Product Hunt-like platform for discovering and launching digital products",
  "version": "1.0.0",
  "main": "src/main.jsx",
  "directories": {
    "api": "Backend API endpoints and serverless functions",
    "src": "Frontend React application",
    "docs": "Documentation and guides",
    "libs": "Shared libraries and database models",
    "scripts": "Utility scripts for database setup and maintenance",
    "public": "Static assets and files"
  },
  "architecture": {
    "frontend": {
      "framework": "React 19",
      "buildTool": "Vite",
      "styling": "Tailwind CSS + Radix UI",
      "routing": "React Router DOM",
      "stateManagement": "React Context + Hooks",
      "authentication": "Clerk"
    },
    "backend": {
      "runtime": "Node.js",
      "architecture": "Serverless Functions",
      "database": "MongoDB",
      "validation": "Zod",
      "authentication": "Clerk JWT"
    },
    "deployment": {
      "platform": "Vercel",
      "cicd": "GitHub Actions (automatic)",
      "domains": "Custom domain support",
      "ssl": "Automatic HTTPS"
    }
  },
  "features": {
    "core": [
      "Product discovery and browsing",
      "Community voting system",
      "Launch week scheduling",
      "User profiles and authentication",
      "Category-based organization",
      "Search and filtering"
    ],
    "premium": [
      "Featured app placement",
      "Enhanced analytics",
      "Priority listing",
      "SEO backlinks",
      "Extended descriptions"
    ],
    "admin": [
      "Content moderation",
      "User management",
      "Analytics dashboard",
      "Category management"
    ]
  },
  "database": {
    "collections": {
      "users": "User profiles synchronized with Clerk",
      "apps": "Product submissions and metadata",
      "categories": "Product categorization system",
      "launch_weeks": "Weekly launch organization",
      "votes": "User voting and engagement",
      "analytics": "Usage and performance metrics"
    },
    "relationships": {
      "user_apps": "One user can submit many apps",
      "app_categories": "Many-to-many through categories array",
      "user_votes_apps": "Many-to-many through votes collection",
      "apps_launch_weeks": "Many apps per launch week"
    }
  },
  "api": {
    "baseUrl": "/api",
    "authentication": "Clerk JWT + User ID header",
    "endpoints": {
      "apps": {
        "GET /apps": "List all apps with pagination and filtering",
        "GET /apps/[id]": "Get specific app details",
        "POST /apps/[id]/vote": "Vote on an app",
        "POST /submit-directory": "Submit new app"
      },
      "users": {
        "GET /user/me": "Get current user profile",
        "GET /profile/[userId]": "Get public user profile",
        "PUT /profile/sync": "Sync profile with Clerk"
      },
      "categories": {
        "GET /categories": "List all categories"
      },
      "weeks": {
        "GET /weeks": "List launch weeks"
      },
      "dashboard": {
        "GET /dashboard": "User dashboard data"
      },
      "webhooks": {
        "POST /webhooks/clerk": "Clerk user synchronization"
      }
    }
  },
  "environments": {
    "development": {
      "url": "http://localhost:5173",
      "database": "mongodb://localhost:27017/directoryhunt",
      "auth": "Clerk test keys"
    },
    "production": {
      "url": "https://your-domain.com",
      "database": "MongoDB Atlas cluster",
      "auth": "Clerk live keys"
    }
  },
  "scripts": {
    "dev": "Start development server with hot reload",
    "build": "Build production bundle",
    "preview": "Preview production build locally",
    "lint": "Run ESLint code analysis",
    "db:init": "Initialize database with collections and indexes",
    "db:seed": "Seed database with sample data",
    "db:setup": "Complete database setup"
  },
  "dependencies": {
    "key": [
      "@clerk/clerk-react: Authentication and user management",
      "react: UI library and component system",
      "react-router-dom: Client-side routing",
      "tailwindcss: Utility-first CSS framework",
      "@radix-ui/*: Accessible component primitives",
      "mongodb: Database driver and operations",
      "zod: Schema validation and parsing",
      "react-hook-form: Form handling and validation",
      "framer-motion: Animation library",
      "lucide-react: Icon library"
    ]
  },
  "configFiles": {
    "vite.config.js": "Build tool configuration with aliases",
    "tailwind.config.js": "CSS framework configuration",
    "vercel.json": "Deployment and routing configuration",
    "eslint.config.js": "Code linting rules",
    "package.json": "Dependencies and scripts",
    ".env": "Environment variables (local only)"
  },
  "commonPatterns": {
    "apiEndpoint": "Method validation → Auth check → Input validation → Business logic → Response",
    "reactComponent": "Hooks → Event handlers → Early returns → JSX with Tailwind",
    "databaseService": "Validation → Connection → Operation → Error handling",
    "authentication": "Clerk provider → useAuth hook → Protected routes"
  },
  "troubleshooting": {
    "authIssues": "Check Clerk keys and user ID headers",
    "databaseErrors": "Verify connection string and network access",
    "buildFailures": "Check imports, dependencies, and memory limits",
    "deploymentIssues": "Verify environment variables and function sizes"
  },
  "support": {
    "documentation": "docs/ directory with comprehensive guides",
    "examples": "docs/EXAMPLES.md with code snippets",
    "troubleshooting": "docs/TROUBLESHOOTING.md for common issues",
    "contributing": "CONTRIBUTING.md for development guidelines",
    "api": "docs/API.md for endpoint documentation"
  }
}
